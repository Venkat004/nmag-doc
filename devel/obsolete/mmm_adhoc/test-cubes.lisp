
(defun check-it (subdiv)
  (declare (optimize (speed 3) (safety 0)))
  (let* ((sum 0.0d0)
	 (step (/ 1.0d0 subdiv))
	 (vol-cell (expt step 3.0d0))
	 (start (* 0.5d0 step)))
    (i-dotimes (nx1 subdiv)
    (i-dotimes (ny1 subdiv)
    (i-dotimes (nz1 subdiv)
    (i-dotimes (nx2 subdiv)
    (i-dotimes (ny2 subdiv)
    (i-dotimes (nz2 subdiv)
      (let* ((dx (i+ nx1 nx2 1))
	     (dy (i- ny1 ny2))
	     (dz (i- nz1 nz2))
	     (r^2 (f* step step
		      (coerce (i+ (i* dx dx) (i* dy dy) (i* dz dz))
			      'double-float))))
	(incf sum (f* vol-cell vol-cell (expt r^2 -1.5d0))))))))))
    sum))

(dotimes (j 16) (if (> j 0) (format t "~2d: ~6,4f~%" j (check-it j))))	    

(defun check-it-2d (subdiv)
  (declare (optimize (speed 3) (safety 0)))
  (let* ((sum 0.0d0)
	 (step (/ 1.0d0 subdiv))
	 (vol-cell (expt step 2.0d0))
	 (start (* 0.5d0 step)))
    (i-dotimes (nx1 subdiv)
    (i-dotimes (ny1 subdiv)
    (i-dotimes (nx2 subdiv)
    (i-dotimes (ny2 subdiv)
      (let* ((dx (i+ nx1 nx2 1))
	     (dy (i- ny1 ny2))
	     (r^2 (f* step step
		      (coerce (i+ (i* dx dx) (i* dy dy))
			      'double-float))))
	(incf sum (f* vol-cell vol-cell (expt r^2 -1.5d0))))))))
    sum))

(dotimes (j 30) (if (> j 0) (format t "~2d: ~6,4f~%" j (check-it-2d j))))
