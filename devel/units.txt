
A few thoughts on physical units, taken down to help me making
up my mind...

* The simulation core (= the OCaml level) should stay free of
  conventions of a particular system of units to the largest possible
  extent.

* Various people may want to use the simulation core with differing
  conventions for units.  

* There basically are two major types of numerical factors:
  powers-of-10 rescalings, as well as "artefacts" like 4pi*10^(-7).

* What is of special concern is the handling of position data:
  on the one hand, we do not want to feed <something>*10^-9
  into the mesh generator, or visualization helpers, as these
  were usually being written with distances ~1 in mind, so
  overly crazy numbers would only run into a continuous stream
  of annoying little problems because we use tools for things they
  actually were never intended for.

* So, for micromagnetism, we will have to provide positional data
  in nanometers. But: how do we then deal with d/dx derivatives in
  operators? Do these automatically receive a re-scaling factor of
  1e9?

  There are some cases where all these re-scalings drop out, such as
  if we compute H_demag via M -> div M -> phi -> H: we differentiate
  and integrate twice each, and if we start with reasonable numbers,
  we end up with reasonable numbers. It would seem quite stupid to
  introduce artificial extra factors into such calculations.

  So, the problem seems to arise whenever quantities living inside
  fields make contact with the outside world. At present, this happens
  in two places: for one, we see it within user-provided C code 
  (here, we can do very little); furthermore, we see it when we peek
  into fields. Here, we could - in principle - provide wrappers.


The main objectives of physical unit support are:

- It should be not too fancy, and implementable with limited effort.

- It should be unobtrusive: the user should have to worry as little
  about it as possible.

- It should try to make sure that value mixups are avoided (to a large
  extent, that is what a units system is for in the first place!)


Further notes:

- Internally, we choose re-scalings in such a way that we work with
  numbers in a reasonable ballpark (100-0.01, say).

- When we have lots of data to be passed around, we usually do not
  look at them too closely. It therfore is perhaps a good idea to use
  internal reasonable-rescaling conventions for all the bulk data
  manipulations, and use SI conversion whenever we make contact
  with the outside.

  This does, however, mean, that the user has to be extra careful when
  he includes constants in his C code. In other words: C code that uses
  physical units constants has to be synthesized from partial strings
  using proper conversion functions for numbers.

- Things may get a bit hairy when we come to formulae such as 
  H = H_demag + H_exch; If our conventions are such that 
  H_demag = -1/3 M for the homogeneously magnetized sphere,
  this presumably means we may have to introduce an extra factor
  into the LLG equation re-scaling the precession and damping
  coefficients (mu0?). We definitely will have such an extra factor
  in tne energy.

- Those numbers which really are of interest to the user typically are
  quite few (= about as many as one can reasonably put into a 2d plot).
  So, we may afford wrapping up these numbers into objects which say
  (basically) "I am a dimensionful (SI?) quantity". 

  In a way, something very similar to this is needed anyway in order
  to limit/reduce the potential for confusion. The only problem is
  that it may be quite some effort to implement properly, and we
  really do not have that much information on the question "how it
  feels". One particular problem then is that we encounter all kinds
  of misguided ideas "how things should behave" from the
  object-oriented sect, such as overloading of arithmetic and
  comparison operators. So, one good idea may force us to adopt a
  whole tower of bad ones.

